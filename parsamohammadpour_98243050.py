# -*- coding: utf-8 -*-
"""ParsaMohammadpour-98243050.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iHodKMXQoR3KKQAEOiG0Jkr62EDw3fK_

Here We Install Packages That We Are Going To Use In This Assignment.
"""

pip install pandas
pip install numpy
pip install matplotlib

"""Here We Import Libraries With A Simple Name For Them."""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""Here We Read The .csv File Which Is Our dataset And Multiply Population Columns By 1000 To Convert.
Then We Print The result.
"""

df = pd.read_csv("/home/Dataset.csv")
df.iloc[:, 3:11] = df.iloc[:, 3:11] * 1000
print(df.to_string())

"""Here We Calculate The Density.
The Formula That We Use To Find density Is To Devide 2022 population By The Area Value Of That Country(That Row).
"""

df["Density"] = df["2022"] / df["Area (km²)"]
print(df.loc[:, ["Name", "Density", "2022", "Area (km²)"]].to_string())
df.to_csv("Q1.csv")

"""First we Define The Years (Columns) We Want To Find The Average Of.
1) In The First Way We Go All Over Rows And For Each Row We Calculate Value Of Columns That Are In The Years List, Then We Devide The Summation By The Years List Length.

2) In The Second Way, We Make A New Column, AveragePopulation Column.
Then We Value It For Each Row By Deviding The Summation Of The Value Of Those Columns That Are In The Years List. Then We Devide The Summation By The Yaers List Length.
"""

years = ["2022", "2020", "2015", "2010", "2000", "1990", "1980", "1970"]
for i in df.index:
    avg = sum([df[x][i] for x in years]) / len(years)
    print(df["Name"][i], avg)
# For Storing In a .csv File
df["AveragePopulation"] = sum([df[x] for x in years]) / len(years)
print(df.loc[:, ["Name", "AveragePopulation"]].to_string())
df.to_csv("Q2.csv")

"""Here We Define all_years List Which Contains The Values Of The Columns (Years) That We Want To Find The Percentage Of World Population Of.
Then For Making The CPU Work Less, We Find The Population Of The World Of Each Year And Store Them In The world_pop List Just To Avoid Calculating These Values Again & Again. Then For Each Year In all_years List, We Define A New Column Which Is The Percentage Of The Population Of The World That Country Had For That Year.
"""

all_years = ["2022", "2020", "2015", "2010", "2000", "1990", "1980", "1970"]
world_pop = [df[x].sum() for x in all_years]
for x in all_years:
    df[x + "-Percent"] = (df[x] / world_pop[all_years.index(x)]) * 100
df.to_csv("Q3.csv")
print(df.to_string())

"""Here We Find The Growth Rate With 2 Ways:
1) We Iterate All Rows & For Each Row We Devide The Population Of That Country In Year 2022 By The Population Of That Country In Year 2020.

2) We Define A Growth Rate Column & set Its value By Deviding Population Of That Country In Year 2022 By The Population Of That Country In The Yaesr 2020.
"""

for i in df.index:
    growth_rate = df["2022"][i] / df["2020"][i]
    print(df["Name"][i], growth_rate)
# For Storing In a .csv File
df["Growth Rate"] = df["2022"] / df["2020"]
print(df.loc[:, ["Name", "2022", "2020", "Growth Rate"]].to_string())
df.to_csv("Q4.csv")

"""Here First We Find The Population Of The World.
Then We Make A New Column With The Value Of Deviding The Population Of each Row In Year 2022 Deviding By The Population Of The World That We Calculated.
Then We Sort These data's By This New Column(percent of population).
"""

curr_pop = df["2022"].sum()
df["percent Of Population"] = (df["2022"] / curr_pop) * 100
sorted_df = df.sort_values(by=["percent Of Population"], ascending=False)
print(sorted_df.loc[:,["Name", "2022", "percent Of Population"]].to_string())
sorted_df.to_csv("Q5.csv")

"""Here We Make A New Column, Rank Column.
Then We User .rank Operator To Give Each Row Special rank For The Column 2022.
Then We Sort These Data's By Rank Column.
"""

df["Rank"] = df["2022"].rank(ascending=False)
df.sort_values(by=["Rank"]).to_csv("Q6.csv")
print(df.sort_values(by=["Rank"]).loc[:,["Name", "2022", "Rank"]].to_string())

"""Here We Make A New Column, Binary Population Class Column, And Set Calue Of This Column Using The Condition Specified.
We Do This Using numpy Library.
It Has A Function (np.where), That We Can Set The Condition In The First Arguement And Set The values That Are Used If The Condition Was Satisfied Or not.
Then we Sort These data's.
"""

df["binary population class"] = np.where(df["2022"] > 300000000, "more than 300", "less than 300")
# # df["binary population class"] = ["more than 300" if x > 300000000 else "less than 300" for x in df["2022"]]
print(df.sort_values(by=["2022"], ascending=False).loc[:,["Name", "2022", "binary population class"]].to_string())
df.sort_values(by=["2022"], ascending=False).to_csv("Q7.csv")

"""Here First We Find The Population Of The World In The Year 2022.
Then we make A New Column, percent of population Column, Then Find The Percent Of the World Population Of That Country, Then We Make Another Column, population class Column, That We Should Set It Values As It's Said In The Question.
For This We Use numpy Library Function (np.select), That Gets Two Arguements.
First It Gets The Conditions Arguement, Which Is A List Of The Conditions That It Has to Checks, And For The Second Arguement, It Gets The Values That Should Be Set For The Row If The Same Index Condition From Condition' List (conditions) Was Satisfied.
Then We Sort These Data's.
"""

curr_pop = df["2022"].sum()
df["percent Of Population"] = (df["2022"] / curr_pop) * 100
conditions = [(df["percent Of Population"] <= 2),
              ((df["percent Of Population"] > 2) & (df["percent Of Population"] <= 5)),
              (df["percent Of Population"] > 5)]
values = [0, 1, 2]
df["population class"] = np.select(conditions, values)
print(df.sort_values("percent Of Population", ascending=False).loc[:,["Name", "percent Of Population", "population class"]].to_string())
df.sort_values("percent Of Population", ascending=False).loc[:,["Name", "percent Of Population", "population class"]].to_csv("Q8.csv")
# curr_pop = df["2022"].sum()
# conditions = [(df["2022"] / curr_pop <= 0.02),
#               ((df["2022"] / curr_pop > 0.02) & (df["2022"] <= 0.05)),
#               (df["2022"] / curr_pop > 0.05)]
# values = [0, 1, 2]
# df["population class"] = np.select(conditions, values)
# print(df.sort_values("2022", ascending=False).loc[:,["Name", "2022", "population class"]].to_string())

"""Just Same As Question Number 7, We define A New Column, growth status Column, And Set Its Value Using np.where Function And Applying The Condition Specified And The Two Values That Are Used If That Condition Is Satisfied Or Not."""

df["growth status"] = np.where(df["2022"] > df["1970"], 0, 1)
print(df.loc[:, ["Name", "2022", "1970", "growth status"]].to_string())
df.to_csv("Q9.csv")

"""First We Make A List Of The Columns (Years) That We Want To Drow China's Population. Then We Get A List Of Those Years Values By Using loc.
The We Use values, flatten and tolist, Just In Order To get The List Of The Population Of China In Those Years.
Then We Use matplot Library To Drow The Plot.
Then We Set Some Configs For That Plot Just To Make It Beautier.
"""

years = ["1970", "1980", "1990", "2000", "2010", "2015", "2020", "2022"]
chin_pop = df.loc[df["Name"] == "China", years].values.flatten().tolist()
print(years)
print(chin_pop)
plt.plot(years, chin_pop, marker = 'o', mec = 'r', mfc = 'r', linestyle  = "--")
plt.xlabel('Years')
plt.ylabel('Population')
plt.title('China Population History')
plt.savefig("Q10.png")
plt.show()



